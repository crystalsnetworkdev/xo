// vim: set filetype=c:

// TODO: double-check flags against AMD/Intel for all insns

// binary arithmetic

#define S(x) ((x) >> 31)

// TODO: double-check cf/of code for add/adc/sub/sbb/cmp

INSN(add, W, W, W, M, M, M,
    tmp = dst + src;
    cf = tmp < dst;
    of = S(dst) == S(src) && S(dst) != S(tmp);
    dst = tmp) // imm

INSN(adc, W, W, W, M, M, M,
    tmp = dst + src + cf;
    cf = cf ? tmp <= dst : tmp < dst;
    of = S(dst) == S(src) && S(dst) != S(tmp); // TODO: cf?
    dst = tmp) // imm

INSN(sub, W, W, W, M, M, M,
    tmp = dst - src;
    cf = tmp > dst;
    of = S(dst) != S(src) && S(dst) != S(tmp);
    dst = tmp) // imm

INSN(sbb, W, W, W, M, M, M,
    tmp = dst - (src + cf);
    cf = cf ? tmp >= dst : tmp > dst;
    of = S(dst) != S(src) && S(dst) != S(tmp); // TODO: cf?
    dst = tmp) // imm

INSN(cmp, _, W, W, M, M, M,
    tmp = dst - src;
    cf = tmp > dst;
    of = S(dst) != S(src) && S(dst) != S(tmp)) // imm

#undef S

INSN(inc, W, _, W, M, M, M, ++dst; of = dst == 0x80000000)
INSN(dec, W, _, W, M, M, M, --dst; of = dst == 0x7fffffff)

// TODO: implement div, idiv, mul, imul? cf/of for mul/imul: !!(result & 0xffff0000)
// TODO: implement neg?
// TODO: implement xadd, other exchange insns?
// TODO: implement lea
// TODO: implement rotate and shift insns
// TODO: implement setcc? like cmovcc

// logic
INSN(and,  W, W, W, M, M, M, dst &= src; cf = 0; of = 0) // imm
INSN(or,   W, W, W, M, M, M, dst |= src; cf = 0; of = 0) // imm
INSN(xor,  W, W, W, M, M, M, dst ^= src; cf = 0; of = 0) // imm
INSN(not,  W, _, _, _, _, _, dst = ~dst)

// TODO: implement bit and byte insns?

// flag control
INSN(clc, _, W, _, _, _, _, cf = 0)
INSN(stc, _, W, _, _, _, _, cf = 1)
INSN(cmc, _, W, _, _, _, _, cf = !cf)

// move
INSN(mov, W, _, _, _, _, _, dst = src) // imm

// conditional move
#define INSN_CMOV(NAME, COND) INSN(NAME, W, _, _, _, _, _, if(COND) dst = src;)

// flags
INSN_CMOV(cmovc,  cf)
INSN_CMOV(cmovo,  of)
INSN_CMOV(cmovp,  pf)
INSN_CMOV(cmovs,  sf)
INSN_CMOV(cmovz,  zf)
INSN_CMOV(cmovnc, !cf)
INSN_CMOV(cmovno, !of)
INSN_CMOV(cmovnp, !pf)
INSN_CMOV(cmovns, !sf)
INSN_CMOV(cmovnz, !zf)

// above, below (unsigned)
INSN_CMOV(cmova,  !cf && !zf)
INSN_CMOV(cmovbe, cf || zf)
// ae=nc, b=c, na=be, nae=c, nb=nc, nbe=a

// greater, less (signed)
INSN_CMOV(cmovg,  !zf && sf == of)
INSN_CMOV(cmovge, sf == of)
INSN_CMOV(cmovl,  sf != of)
INSN_CMOV(cmovle, zf || sf != of)
// ng=le, nge=l, nl=ge, nle=g

// equal
// e=z, ne=zf

// parity even, odd
// pe=p, po=np
